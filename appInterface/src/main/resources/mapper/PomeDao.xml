<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.qin.dao.PomeDao">

    <select id="findPomeBySearchText"  resultMap="findSearchMap">
        select
        #{searchText} as searchText,
        #{text} as text
    </select>
    <resultMap id="findSearchMap" type="cn.qin.vo.pomeVo.PomeSerachList">

        <collection property="authorList"  ofType="cn.qin.vo.pomeVo.PomeSearchVo"
                    javaType="java.util.ArrayList" select="fildSearchAuthorList"
                    column="{searchText=searchText,text=text}"/>
        <collection property="pomeList"  ofType="cn.qin.vo.pomeVo.PomeSearchVo"
                    javaType="java.util.ArrayList" select="fildSearchPomeList"
                    column="{searchText=searchText,text=text}"/>
    </resultMap>
    <select id="fildSearchAuthorList" resultType="cn.qin.vo.pomeVo.PomeSearchVo">
        select
        author.name as itemName,
        author.author_id as itemId
        from author
        where  author.name like #{searchText}
        order by INSTR(author.name,#{text}) asc
    </select>
    <select id="fildSearchPomeList" resultType="cn.qin.vo.pomeVo.PomeSearchVo">
        select
        pome.name as itemName,
        pome.pome_id as itemId
        from pome
        where  pome.name like #{searchText}
        order by INSTR(pome.name,#{text}) asc
    </select>

    <select id="findPomeDetailById"  resultType="cn.qin.vo.pomeVo.PomeVo">
        select
            pome.*,
            author.name as authorName
        from pome
        left join author on author.author_id = pome.author_id
        where  pome.pome_id = #{pomeId};
    </select>

    <select id="findPomeListByPage"  parameterType="java.lang.String" resultType="cn.qin.vo.pomeVo.PomeVo">
        select
            pome.name,
            pome.pome_id,
            pome.type,
            author.name as authorName
        from pome
        left join author on author.author_id = pome.author_id
        where  1=1
        <if test="pomeVo.authorName != null">
            AND author.name like #{pomeVo.authorName}
        </if>
    </select>



    <select id="findRandomPomeForSize"  resultType="cn.qin.vo.pomeVo.PomeVo">
        select
        pome.pome_id,
        pome.name,
        pome.author_id,
        pome.type,
        author.name as authorName
        from pome
        left join author on author.author_id = pome.author_id
        ORDER BY RAND() LIMIT #{size}
    </select>

    <select id="findPomeDaily"  resultType="cn.qin.vo.pomeVo.PomeVo">
        select
            pome.*,
            author.name as authorName
        from pome
        left join author on author.author_id = pome.author_id
        ORDER BY RAND() LIMIT 1
    </select>

    <select id="selectAuthorHasPome" resultType="cn.qin.vo.authorVo.AuthorVo">
        SELECT
        author.author_id,
        author.`name`,
        COUNT(author.`name`) as count
        FROM
        author
        LEFT JOIN pome ON pome.author_id =  author.author_id
        WHERE pome.`name` IS NOT null
        GROUP BY author.`name`
        ORDER BY COUNT(author.`name`) DESC
    </select>
</mapper>